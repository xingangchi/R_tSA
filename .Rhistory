e<-rnorm(100)
#例3-1
x1<-arima.sim(n=100,list(ar=0.8))
x3<-arima.sim(n=100,list(ar=c(1,-0.5)))
e<-rnorm(100)
x2<-filter(e,filter = -1.1,method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
x4<-filter(e,filter = c(1,0.5),method = "recursive")
ts.plot(x1)
ts.plot(x2)
ts.plot(x3)
ts.plot(x4)
#例3-5
x1<-arima.sim(n=1000,list(ar=0.8))
x2<-arima.sim(n=1000,list(ar=-0.8))
x3<-arima.sim(n=1000,list(ar=c(1,-0.5)))
x4<-arima.sim(n=1000,list(ar=c(-1,-0.5)))
acf(x1)
acf(x2)
acf(x3)
acf(x4)
#例3-5 续
pacf(x1)
pacf(x2)
pacf(x3)
pacf(x4)
#例3-6
x1<-arima.sim(n=1000,list(ma=-2))
x2<-arima.sim(n=1000,list(ma=-0.5))
x3<-arima.sim(n=1000,list(ma=c(-4/5,16/25)))
x4<-arima.sim(n=1000,list(ar=c(-5/4,25/16)))
acf(x1)
acf(x2)
acf(x3)
acf(x4)
#例3-6 续(2)
pacf(x1)
pacf(x2)
pacf(x3)
pacf(x4)
#例3-8
x<-arima.sim(n=1000,list(ar=0.5,ma=-0.8))
acf(x)
pacf(x)
#例3-9
#读入数据，并绘制时序图
a<-read.table("E:/R/data/file8.csv",sep=",",header = T)
x<-ts(a$kilometer,start = 1950)
plot(x)
#白噪声检验
for(i in 1:2) print(Box.test(x,type = "Ljung-Box",lag=6*i))
#绘制自相关图和偏自相关图
acf(x)
pacf(x)
#例3-10
#读入数据，并绘制时序图
overshort<-read.table("E:/R/data/file9.csv",sep=",",header = T)
overshort<-ts(overshort)
plot(overshort)
#白噪声检验
for(i in 1:2) print(Box.test(overshort,type = "Ljung-Box",lag=6*i))
#绘制自相关图和偏自相关图
acf(overshort)
pacf(overshort)
#例3-11
#读入数据，并绘制时序图
b<-read.table("E:/R/data/file10.csv",sep=",",header = T)
dif_x<-ts(diff(b$change_temp),start = 1880)
plot(dif_x)
#白噪声检验
for(i in 1:2) print(Box.test(dif_x,type = "Ljung-Box",lag=6*i))
#绘制自相关图和偏自相关图
acf(dif_x)
pacf(dif_x)
library(zoo)
library(forecast)
#例3-9系统自动定阶
auto.arima(x)
#例3-10系统自动定阶
auto.arima(overshort)
#例3-11系统自动定阶
auto.arima(dif_x)
#例3-9续(1)
a<-read.table("E:/R/data/file8.csv",sep=",",header = T)
x<-ts(a$kilometer,start=1950)
x.fit<-arima(x,order = c(2,0,0),method = "ML")
x.fit
#例3-10续(1)
overshort<-read.table("E:/R/data/file9.csv",sep=",",header = T)
overshort<-ts(overshort)
overshort.fit<-arima(overshort,order = c(0,0,1))
overshort.fit
#例3-11续(1)
b<-read.table("E:/R/data/file10.csv",sep=",",header = T)
dif_x<-ts(diff(b$chang_temp),start = 1880)
dif_x.fit<-arima(dif_x,order = c(1,0,1))
dif_x.fit
#例3-9续(2)
a<-read.table("E:/R/data/file8.csv",sep=",",header = T)
x<-ts(a$kilometer,start=1950)
x.fit<-arima(x,order = c(2,0,0),method = "ML")
for(i in 1:2) print(Box.test(x.fit$residual,lag=6*i))
#例3-10续(2)
overshort<-read.table("E:/R/data/file9.csv",sep=",",header = T)
overshort<-ts(overshort)
overshort.fit<-arima(overshort,order = c(0,0,1))
for(i in 1:2) print(Box.test(overshort.fit$residual,lag=6*i))
#例3-11续(2)
b<-read.table("E:/R/data/file10.csv",sep=",",header = T)
#例1-1
#x<-read.table("G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/file1.csv",sep=",",header=T)
x<-read.table("file1.csv",sep=",",header=T)
x
yield
#1.4.2 R的安装
install.packages('zoo')
library(zoo)
#1.4.3 R语言基本规则
sum(1,2,3)
sum(1,2,3
)
x=1;y=2;x+y
{x=1
y=2
x+y}
x<-3
2*x+1->y
z<-y^2
x
y
z
#1.4.4 生成时间序列数据
price<-c(101,82,66,35,31,7)
price<-ts(price,start=c(2005,1),frequency = 12)#ts生成时间序列#开始年月
price
price<-scan()#手工输入或者复制列数据
#例1-1
#x<-read.table("G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/file1.csv",sep=",",header=T)
x<-read.table("file1.csv",sep=",",header=T)
x
yield
x$yield
#1.4.5 时间序列数据的处理
y<-log(x$yield)
y
z<-subset(x,year>1925,select=yield)#取子集
z
a<-c(1:7)
a[4]<-NA
a
y1<-na.approx(a)#线性插值
y1
y2<-na.spline(a)#样条插值
y2
#1.4.6 时间序列数据导出
#例1-1 续
ln_yield<-log(x$yield)
x_new<-data.frame(x,ln_yield)
write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
write.table(x_new,file="yield.csv",sep=",",row.names = F)
y2
#1.4.6 时间序列数据导出
#例1-1 续
ln_yield<-log(x$yield)
x_new<-data.frame(x,ln_yield)
write.table(x_new,file="yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#1.4.3 R语言基本规则
sum(1,2,3)
sum(1,2,3
)
x=1;y=2;x+y
{x=1
y=2
x+y}
x<-3
2*x+1->y
z<-y^2
x
y
z
#1.4.4 生成时间序列数据
price<-c(101,82,66,35,31,7)
price<-ts(price,start=c(2005,1),frequency = 12)#ts生成时间序列#开始年月
price
price<-scan()#手工输入或者复制列数据
#例1-1
#x<-read.table("G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/file1.csv",sep=",",header=T)
x<-read.table("file1.csv",sep=",",header=T)
x
yield
x$yield
#1.4.5 时间序列数据的处理
y<-log(x$yield)
y
z<-subset(x,year>1925,select=yield)#取子集
z
a<-c(1:7)
a[4]<-NA
a
y1<-na.approx(a)#线性插值
y1
y2<-na.spline(a)#样条插值
y2
#1.4.6 时间序列数据导出
#例1-1 续
ln_yield<-log(x$yield)
x_new<-data.frame(x,ln_yield)
write.table(x_new,file="yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#write.table(x_new,file="G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/yield.csv",sep=",",row.names = F)
#1.4.2 R的安装
install.packages('zoo')
install.packages("zoo")
#例1-1
#x<-read.table("G:/applied statistics/时间序列分析/时间序列分析——基于R数据/数据/案例数据/file1.csv",sep=",",header=T)
x<-read.table("file1.csv",sep=",",header=T)
x
yield
